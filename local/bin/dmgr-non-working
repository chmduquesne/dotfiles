#!/bin/bash

SESSIONSDIR=$HOME/.dtach

err(){
  >&2 echo "$@"
}

msg(){
    echo -e "\033[1K"
    echo "$@"
}


select_session(){
  sessions="$(ls -1 $SESSIONSDIR)"
  [ -z "$sessions" ] && return
  if [ $(echo "$sessions" | wc -l) == 1 ]; then
    echo "$sessions"
  else
    echo "$sessions" | fzf --prompt "$@"
  fi
}


new(){
  session=$1
  shift
  dtach -A "$SESSIONSDIR/$session" -z env DTACH=1 "$@"
}

join(){
  session=$1
  dtach -a "$SESSIONSDIR/$session" -z
}

_kill(){
  session=$1
  [ $? != 0 ] && return
  sockinfo=$(ss -xlpH src "$SESSIONSDIR/$session" | awk -F' ' '{print $NF}')
  [ -z "$sockinfo" ] && \
    err "Could not identify process for $session" && return
  pid=$(echo "$sockinfo" | awk -F, '{print $2}' | sed 's/pid=//')
  msg "Killing $session" && sleep 1
  kill $pid
}

has_sessions(){
  [ -n "$(ls -1 $SESSIONSDIR)" ]
}

finished(){
  [ -n "$1" ] && ! [ -S "$SESSIONSDIR/$1" ]
}

loop(){
  while has_sessions; do
    if finished "$active_session"; then
      active_session=$(ls -1 $SESSIONSDIR | sort | tail -n1)
      join "$active_session"
    fi
    prompt="(J)oin | (k)ill | (n)ew | (q)uit "
    read -n1 -p "$prompt" choice
    [ -z "$choice" ] && choice='j'
    choice=$(echo $choice | tr '[:upper:]' '[:lower:]')
    case $choice in
      j)
        active_session=$(select_session "Select session to join")
        join $active_session
        ;;
      k)
        _kill $(select_session "Select session to kill")
        ;;
      n)
        active_session="$(basename $SHELL)-$(date +%Y-%m-%d_%H:%M:%S)"
        new $SHELL
        ;;
      q)
        break
        ;;
      *)
        msg "Invalid choice"
        ;;
    esac
  done
  if ! has_sessions; then
    msg "No session left"
  fi
}

if [ -n "$DTACH" ]; then
  err "You are already within a session"
  exit 1
fi

if [ -n "$1" ]; then
  set $SHELL
fi

active_session="$(basename $1)-$(date +%Y-%m-%d_%H:%M:%S)"
new $active_session "$@"

loop
